@import: ../../shinchoku-tairiku.satyh/shinchoku-tairiku

let-block +amutake = '<
  +chapter{出先でも証明がしたい Part 1}{千里の道も一歩から - 老子}<
+p{
こんにちは。\@amutakeです。
今回は『出先でも証明がしたい』というタイトルで、Coqという定理証明ツールのエディタアプリを作っていく話を、3回くらいにわけて書いていこうと思っています。
}

+section?:(`amutake:section:motivation`){モチベーション}<
+p{
今回作成するアプリの名前は『ProveEverywhere』といいます。ProveEverywhereは私が学生の頃に作った、AndroidからCoqのコードが書け証明ができるアプリの名前です。
Androidアプリを作ってみようという授業があり、その授業の自由課題で作ったのですが、もう古いので作り直したいというのがモチベーションになります。
}
+p{
当時このアプリを作成したモチベーションはその名の通り「どこでも証明できたら嬉しいね」です。
当時、任意の命題を証明できるというバグ\footnote{\url(`https://github.com/clarus/falso`);}がCoqで見つかり、Twitter上で話題になっていたのですが、
私は電車の中にいてPCを開くわけにもいかずすぐに確かめることができなかったという経緯からこのアプリを作ろうと考えました。
}
+figure?:(`amutake:figure:v1`)?:(5cm)(`./amutake/v1.pdf`){ProveEverywhere v1の画面}
+p{
さて、これ以降、学生時代に作ったアプリとこれから作ろうとしているアプリを明示的に区別したい場合はそれぞれv1、v2と記述することにします。
}
+p{
ProveEverywhere v1はもう6年前のアプリで、最新のCoqで使えなくなっています。確かめてはいないですがAndroidへのアプリのインストールもできなくなっているはずです。
「ProveEverywhereの次期バージョンはないのか」と聞かれることがたまにあり、いつか書き直したいと思っていたのと、
本誌のいいネタになりそうなのでこの機会に作り直して行こうと思います。
}
>

+section?:(`amutake:section:coq`){Coqとは}<
+p{
Coqとは定理証明支援器と呼ばれているシステムのひとつです。ここでは詳しく説明しませんが、プログラムの性質や数学の命題を証明できるツールだと思ってください。
}
+p{
Coqでは、命題を定義して、その証明の方針（タクティクといいます）を書き、Coqに伝えてやることで証明を進めていきます。タクティクによって現在の証明の状態を遷移させていくイメージです。
図\ref(`amutake:figure:coq-trans1`);、図\ref(`amutake:figure:coq-trans2`);は証明したいもの（ゴールといいます）がPかつQのときに、PとQの2つのゴールに分割して証明をすすめるように状態を遷移させています。
}
+figure?:(`amutake:figure:coq-trans1`)?:(10cm)(`./amutake/coq1.pdf`){Coqでの証明1}
+figure?:(`amutake:figure:coq-trans2`)?:(10cm)(`./amutake/coq2.pdf`){Coqでの証明2}
+p{
例として、「PならばP」という（自明に成り立つ）命題の証明を見ていきます。
命題の定義およびその証明は以下のようになります。
}
+code?:(`amutake:code:tauto`)(```
Theorem my_thm : forall P : Prop, P -> P.
Proof.
  intros P H.
  apply H.
Qed.
```){PならばPのCoqでの証明}
+p{
Coq では、\code(`.\s`);がひとつの文の区切りになっており、\code(`.\s`);単位でCoqに伝えていきます。これをセンテンスといいます。
}
+p{
CoqにはcoqtopというREPLが含まれています。このcoqtopを使って、証明の状態が変わっていくことを見ていきましょう。
}
+code?:(`amutake:code:tauto-coqtop`)(```
$ coqtop
Welcome to Coq 8.12.0 (July 2020)

Coq < Theorem my_thm : forall P : Prop, P -> P.
1 subgoal

  ============================
  forall P : Prop, P -> P

my_thm < Proof.

my_thm < intros P H.
1 subgoal

  P : Prop
  H : P
  ============================
  P

my_thm < apply H.
No more subgoals.

my_thm < Qed.

Coq <
```){PならばPのcoqtopでの実行}
+p{
このように、センテンスをひとつずつCoqに伝えていきます。横棒の上下にいろいろと書かれているのが現在の証明の状態で、横棒の上が前提、下が証明したいもの（ゴール）となります。タクティクを駆使することで、この証明の状態を書き換えて証明を進めていきます。
}

+subsection?:(`amutake:section:coq-editor`){Coqのエディタとその基本機能}<
+p{
Coqの主なエディタには、Coq公式のCoqIDE、EmacsプラグインのProofGeneral、VSCodeプラグインのVSCoqがあります。
どれも基本的な機能として、以下の3つの機能があります。
}
+listing{
* 証明の状態の表示
* どこまでセンテンスを読み込んだかの表示
* センテンスをひとつ進める
* センテンスをひとつ戻す
* 特定の位置まで飛ばす
}
+p{
これらの機能がとりあえずあると、Coqのエディタとしては最低限使えるものになります。
}
>
>

+section?:(`amutake:section:app-spec`){作るアプリの仕様}<
+p{
アプリの仕様（できること）を決めていきます。
仕様というにはあまりにもざっくりしていますが、以下のようなことができるアプリにしたいです。
}
+listing{
* Coqエディタ
  ** 基本機能
    *** 証明の状態の表示
    *** どこまでセンテンスを読み込んだかの表示
    *** センテンスをひとつ進める
    *** センテンスをひとつ戻す
    *** 特定の位置まで飛ばす
  ** スニペット機能 (モバイルだと入力が面倒なため)
* ファイル保存・アップロード
  ** ファイルリスト
  ** ローカル保存
  ** Gistへのアップロード・clone
    *** Twitterへの投稿
}
+p{
なお、これらはProveEverywhereの世界で一番のヘビーユーザーである株式会社proof ninjaの\@yoshihiro503さんにアドバイスをいただきました。ありがとうございました。
}
>

+section?:(`amutake:section:coq-xml-protocol`){Coq XMLプロトコル}<
+p{
Coq XMLプロトコルとは、Coqを操作するためのXML APIです。CoqIDEやVSCoqで使われています。もしかしたらProofGeneralでも使われているかもしれませんがあまり調べていません。
}
+p{
Coq XMLプロトコルのドキュメントはこちらにあります。
\url(`https://github.com/coq/coq/blob/master/dev/doc/xml-protocol.md`);
}
+p{
このドキュメント、Coq XMLプロトコルの各種コマンドについての説明は充実していますが、肝心の「どのようにしてコマンドを送り、結果を受け取るか」についてはどこにも書いていません。
なので、使い方はVSCoqのソースコードを読んでエスパーしていきます。
}
+p{
Coq XMLプロトコルの解読には特に以下のファイルが参考になりました。
}
+listing{
* \url(`https://github.com/coq-community/vscoq/blob/master/server/src/coqtop/CoqTop8.ts`);
  ** Coqを起動してサーバと接続させています
* \url(`https://github.com/coq-community/vscoq/blob/master/server/src/coqtop/IdeSlave8.ts`);
  ** 各種コマンドの送信をしています
* \url(`https://github.com/coq-community/vscoq/blob/master/server/src/stm/STM.ts`);
  ** Coqの状態遷移を管理しています
}

+column{coqtopの\code(`-emacs`);オプション}<
+p{
Coq XMLプロトコルはCoq 8.5から入った機能です。
Coq 8.5はProveEverywhere v1を作ったあとに出たバージョンなので当時はこの機能はありませんでした。
なのでProveEverywhere v1ではcoqtopを標準入出力で操作する方法を使っていました。
これは当時のProofGeneralがとっていた方法で、coqtopの\code(`-emacs`);というオプションを使っています\footnote{\url(`http://amutake.hatenablog.com/entry/2014/07/07/020814`);}。\code(`-emacs`);オプション、具体的なエディタの名前つけちゃうんだという感じで面白いですよね。
}
>

+subsection?:(`amutake:section:coqidetop`){coqidetopの起動方法}<
+p{
Coq XMLプロトコルを使ってCoqを操作するには、\code(`coqidetop`);という専用のコマンドを使います。CoqのREPLであるcoqtopの、IDEから使うためのバージョンです。
以下が\code(`coqidetop`);を起動する際の基本的なオプションです。
}
+code?:(`amutake:code:coqidetop`)(```
coqidetop \
  -main-channel <MAIN_ADDR>:<MAIN_PORT_R>:<MAIN_PORT_W> \
  -async-proofs on
```){\code(`coqidetop`);の起動方法}
+p{
Coqとのやりとりはメインチャンネルというチャンネルを通して行います。チャンネルは、TCPあるいは標準入出力を使ってCoqとやりとりをする通信路です。読み取り用チャンネルと書き込み用チャンネルがあり、それぞれCoqからコマンドの結果を受け取るチャンネル、Coqにコマンドを伝えるチャンネルとして使います。
}
+p{
メインチャンネルは\code(`-main-channel`);というオプションで指定します。例えば読み取り用チャンネルのポートが12345、書き込み用チャンネルのポートが54321、どちらもローカルホストで起動している場合は、\code(`-main-channel 127.0.0.1:12345:54321`);と指定します。標準入出力の場合は\code(`-main-channel stdfds`);と指定します。\code(`coqidetop`);を試す場合は標準入出力の方を使うと手軽に試すことができます。
}
+p{
メインチャンネルの他にも制御チャンネル（\code(`-control-channel`);で指定します）というチャンネルもありますが、何に使うのかいまいちよくわかりません。VSCoqを見ても、特に何かに使われているというわけではなさそうでした。なので本稿では省略します。
}
+p{
\code(`-async-proofs`);は非同期証明機能\footnote{\url(`https://coq.inria.fr/refman/addendum/parallel-proof-processing.html`);}をオンにするかというもので、基本はオンにしておいていいと思います。
}
>

+subsection?:(`amutake:section:command-feedback`){コマンドとフィードバック}<
+p{
Coqを操作するには、書き込み用メインチャンネルに「コマンド」を書き込む必要があります。
コマンドをCoqが実行すると、コマンドの結果や「フィードバック」と呼ばれるデータが読み取り用メインチャンネルから取得することができます。
}
+p{
本節では、まずコマンドの理解に必要な状態IDについての説明をしてから、主要なコマンド（Init、Add、EditAt、Goal）を説明します。最後にフィードバックと呼ばれるデータについて説明していきたいと思います。
}
+p{
なお、これ以外のコマンドについては以下をご覧ください。
\url(`https://github.com/coq/coq/blob/master/dev/doc/xml-protocol.md`);
}
+subsubsection{状態ID}<
+p{
各種コマンドでは状態ID（State ID）という自然数が返ってくるあるいは指定することがあります。
これは、いまどのセンテンスの位置にいるかを表すIDです。
後述するAddコマンド（センテンスの追加）やEditAtコマンド（指定した状態にジャンプ）によって「現在どの状態にいるか」が変わります。
}
+p{
状態IDは一度つけられると上書きされないことに注意してください。
例えば、現在状態IDが2の状態でEditAtでID1に巻き戻ると、そこからAddされてもIDは2にならず、3などまだ使われていないIDが使われます。なので状態は木構造になります（図\ref(`amutake:figure:state-ids`);）。
}
+figure?:(`amutake:figure:state-ids`)?:(5cm)(`./amutake/state-ids.pdf`){状態IDの木構造}
>
+subsubsection{Initコマンド}<
+p{
最初の状態IDを返します。最初に指定すべき状態IDは\code(`coqidetop`);を起動した時点ではわからないので、Initを実行して初めて知ることができます（とはいえInitを実行しなくてもいきなりID1指定でAddは実行できます）。
}
+p{
Initコマンドは\code(`coqidetop`);を起動してから一度しか実行できません。なので一度起動して状態を進めた\code(`coqidetop`);を初期化して使いまわすということはできません。初期化するには\code(`coqidetop`);を再起動するか、後述するEditAtを使います。
}
>
+subsubsection{Addコマンド}<
+p{
Addコマンドは最も基本的なコマンドで、状態IDと次のセンテンスを与えて状態を進めるコマンドです。
結果には次の状態IDが含まれているので、これを指定することで状態を次へ次へと進めていくことができます。
}
+p{
なお、指定する状態IDは現在の状態IDしか指定できません。古い状態IDを指定すると\code(`This is not supported yet, sorry.`);というエラーメッセージが返ってくるので、将来的には対応されるのかもしれませんが、とりあえず8.12.0ではできません。
}
+p{
また、Addコマンドの結果がOKになっても、実際にセンテンスを処理した結果Coqに受理されるかどうかはわからないことに注意してください。センテンスが受理されるかどうかは後述するフィードバックなどを見ることになります。
}
>
+subsubsection{EditAtコマンド}<
+p{
状態IDを指定して、その状態に戻るコマンドです。
なお、巻き戻したあとに巻き戻る前の状態に戻ることはできません。
つまり、現在いる状態IDよりも大きいIDにジャンプすることはできません。
}
>
+subsubsection{Goalコマンド}<
+p{
Goalコマンドは現在の証明の状態を取得するコマンドです。
Coqでは証明の状態はいくつものサブゴール（場合分けしたときの証明しなければいけない命題）に分かれているのですが、それらがリストとして返ってきます。
}
+p{
Addコマンドで証明を進めたあとはいちいちGoalコマンドを実行しなければ証明の状態を取得できないということになります。個人的にはAddで返ってきてもいいように思うのですがそうはなっていないようです。
}
>
+subsubsection{Aboutコマンド}<
+p{
Coqのバージョンなどを取得するコマンドです。
}
>
+subsubsection{フィードバック}<
+p{
各種コマンドの結果とは別に、フィードバックというデータがメインチャンネルから取得できることがあります。これは、状態IDの現在の状態（処理中や完了など）、ワーカーの状態、ログ、などを表すデータになります。
}
+p{
フィードバックは必ず見なければいけないデータかどうかというと、必ずしもそうではありません。Addコマンドでセンテンスが受理されたかどうかはフィードバックで流れてきますが、AddコマンドのあとにGoalコマンドなどを実行するとエラーになったときはエラー内容を取得することができます。
}
>
>
+subsection{チャンネルの特徴}<
+p{
\code(`coqidetop`);のチャンネルには、（一部のコマンドのみかもしれませんが）連続で送信すると結果の順序が変わることがあるという特徴があります。チャンネルはTCPでつないでいるとはいえCoq側でリオーダーが起きてしまうようです。筆者が試したときは、Initコマンド、Aboutコマンドの順でコマンドを送信したにも関わらず、結果はAboutコマンド、Initコマンドの順で返ってきました。
}
+p{
コマンドの結果にはどのコマンドの結果かという情報は入っていないので、返ってきた結果を単純にコマンドの送信順で対応付けると、成功していたコマンドを失敗とみなしてしまったりします。
}
+p{
Coq XMLプロトコルを使ってCoqを操作する場合にはこの特徴を考慮する必要があります。
}
>
>

+section?:(`amutake:section:architecture`){全体のアーキテクチャ}<
+p{
節\ref(`amutake:section:coq-xml-protocol`);では、CoqとはCoq XMLプロトコルで通信できることがわかりました。また、1つのcoqtopに対して1つのファイルが相当することがわかりました。
この節では、アプリを含む全体のアーキテクチャについて書いていこうと思います。
}
+p{
いきなりですが図\ref(`amutake:figure:architecture`);のようにします。
}

+figure?:(`amutake:figure:architecture`)?:(13cm)(`./amutake/architecture.pdf`){全体アーキテクチャ}

+p{
基本的にはこのアーキテクチャはv1と変わっていません。
まずアプリ自体にCoqを埋め込むのは難易度が高そう（不可能ではない）なので、モバイルアプリからCoqがインストールされているサーバに接続してCoqを操作する形にしたいと思います。
}
+p{
モバイルアプリからサーバへはCoq XMLプロトコルのコマンドのようなものを送りつけることにします。
FeedbackのようにサーバからPushしたいこともあるかもしれないのと、コマンドの順序は保ちたいので、アプリとサーバ間はWebSocketで通信することにします。
}
+p{
サーバは、アプリから受け取ったコマンドをCoq XMLプロトコルの形に変換してCoqに伝え、結果をアプリに返します。
アプリとcoqtopは1:1にします。アプリからのリクエストがあったときにcoqtopを起動し、そのcoqtopをアプリが占有するようなイメージです。
}
+p{
サーバ・Coq間では、Coq XMLプロトコルの「結果の順序が入れ替わることがある」という性質のため、Coqにコマンドを送信したあとに必ず結果を待つようにします。ここは同期的になってしまいますが、入れ替わったことが検知できない以上どうしようもない気がします。（実際、VSCoqでもこのようにしています）
}
>

+section?:(`amutake:section:protocol`){プロトコルの設計}<
+p{
節\ref(`amutake:section:architecture`);では、ProveEverywhere v2のアーキテクチャを、Coqを制御するサーバ、そしてそのサーバと通信をするモバイルアプリ（クライアント）、という形にしました。また、モバイルアプリとサーバの間の通信はWebSocketで行うことにしました。この節ではサーバとクライアント間のプロトコルを設計していきます。
}
+p{
Coq XMLプロトコルをそのまま使ってもいいのですが、流石に結果の順序が入れ替わったりすると面倒そうなので、そのあたりはサーバで吸収しつつクライアントとやりとりをする形にしたいと思います。また、ネットワークを介するためローカルのCoqと通信するよりもレイテンシが大きくなることも考慮に入れる必要があります。
}
+subsection{プロトコル基本方針と要件}<
+p{
通信は非同期で行いたいです。サーバと通信している最中はアプリ側がブロックされて操作できなくなると不便です。
サーバ側の障害やタイムアウトがあっても問題ないようにしたいです。
}
+p{
クライアント側とサーバ側で状態を同期させなければいけません。クライアント側とサーバ側で受理されているコマンドが異なると、コマンドを受け付けてもらえなくなるか、間違った結果がクライアント側に返されてしまうことになります。
}
+p{
その上で状態が同期できていない可能性が出たときは潔くリセットして最初からやりなおすことにします。ProveEverywhereはただのエディタですし、本来は受理されないセンテンスなのに受理されているように見えるよりはこうしたほうがよっぽどいいです。
}
>
+subsection{コマンドID}<
+p{
Coq XMLプロトコルには状態IDがありますが、これはCoqによって生成されるIDで、クライアントが勝手につけることはできません。これはコマンドの連続送信時の使い勝手に影響が出ます。Coqからの返答を待たなければ次のIDがわからないためです。
}
+p{
ローカルに起動しているCoqとの通信であればレイテンシはそれほどないと思われるのでいいと思いますが、今回はネットワークを介すため、連続送信するためにはCoqから状態IDを受け取ってその状態IDを使って送信、新しく生成されたIDを待って返ってきたらそのIDで送信……ということをする必要があります。
}
+p{
これだと非常に不便なため、クライアントが自由につけられるIDを用意して、クライアントとサーバ間はそのIDを、サーバとCoq間は状態IDを使うことを考えます。
このIDのことをコマンドIDと呼ぶことにします。
}
+p{
コマンドIDは以下の用途に使います。
}
+listing{
* サーバからの返答がどのコマンドへの返答なのかをコマンドIDで判別する
* そのコマンドが依存しているコマンドIDを指定することで、依存しているコマンドが成功しないとCoqには与えないようにする
}
+p{
あるコマンドが依存しているコマンドのことを依存コマンドと呼ぶことにします。
例えば、図\ref(`amutake:code:tauto`);において\code(`apply H.`);をCoqに伝えるコマンドの依存コマンドは\code(`intros P H.`);をCoqに伝えるコマンドになります。
}
+p{
同じコマンドIDは一度しか使えず、以前送ったコマンドと全く同じコマンドを送信する場合でも別のコマンドIDになることにします。先に送ったコマンドと再送したコマンドのどちらのタイムアウトなのかわからないためです。
}
>

+subsection{起動時}<
+p{
起動はWebSocketの接続が確立したらcoqtopを起動してInitコマンドを送り結果の状態IDを覚えておきます。
また、Aboutコマンドを使ってCoqのバージョン情報などを取得し、それをクライアントに送信します。
}
+code(
```
 client                 server                 coqtop
   |       connect        |
   | <------------------> |    exec & connect
   |                      | -------------------> |
   |                      |        Init          |
   |                      | -------------------> |
   |                      |      State ID        |
   |                      | <------------------- |
   |                      |        About         |
   |                      | -------------------> |
   |                      |      Coq Info        |
   |      Coq Info        | <------------------- |
   | <------------------- |                      |
```
){起動時のフロー}
>
+subsection{Nextコマンド}<
+p{
次のセンテンスに進むコマンドです。
センテンスを進ませるとき、ゴールの状態が変わるので、一緒にゴールも取得して返します。また、Goalコマンドを使うことでAddコマンドが失敗していないかどうかも取得します。
}
+p{
Nextでは1つ前のセンテンスに進んだときのコマンドIDを依存コマンドIDに指定して送ります。これで連続で送信できるかつ途中で失敗してもサーバ側で判断してCoqには送らないとすることができます。連続で送信する場合、WebSocket経由でもあるのでサーバに届いたコマンドが失敗したことを踏まえたコマンドなのかどうかわからず、かつ失敗したコマンドを抜きにしても受理されるコマンドの可能性があるので、Coqに送ってはいけません。
}
+p{
また、サーバ側ではコマンドIDと状態IDの紐付けを持っておくようにします。これでAddに指定する状態IDがわかるようにします。
}
+code(
```
 client                 server                 coqtop
   |        Next          |                      |
   | -------------------> |         Add          |
   |                      | -------------------> |
   |                      |       State ID       |
   |                      | <------------------- |
   |                      |         Goal         |
   |                      | -------------------> |
   |                      |         Goal         |
   |        Goal          | <------------------- |
   | <------------------- |                      |
```
){Nextコマンドのフロー}
>
+subsection{Backコマンド}<
+p{
Backは指定したコマンドIDのセンテンスに戻るコマンドです。
ひとつ前に戻るコマンドとひとつ以上前に戻るコマンドをBackコマンド1つで行います。
}
+p{
サーバはコマンドIDと状態IDの紐付けを持っているので、コマンドIDから状態IDを引いてきてそれをEditAtコマンドにのせてCoqに送信します。ゴールも変わるかもしれないので取得して、結果をクライアントに返します。
}
+code(
```
 client                 server                 coqtop
   |         Back         |                      |
   | -------------------> |       EditAt         |
   |                      | -------------------> |
   |                      | <------------------- |
   |                      |        Goal          |
   |                      | -------------------> |
   |                      |        Goal          |
   |         Goal         | <------------------- |
   | <------------------- |                      |
```
){Backコマンドのフロー}
>
+subsection{エラー}<
+p{
サーバまたはクライアントで何らかのエラーが起きたとき、それを相手に送ります。受け取ったら何かしなければいけないというわけではなく、状況に応じて続行したり接続を切ったりするようにします。
}
+code(
```
   A                      B
   |        Error         |
   | -------------------> |
```
){エラーのフロー}
+p{
主なエラーにはタイムアウトがあります。Coqから返答がなかなか返ってこなかったとき、サーバは「このコマンドIDがタイムアウトになった」というエラーをクライアントに返します。
タイムアウトを受け取ったクライアントは接続を切って再接続をします。
}
+p{
一度タイムアウトが起きると、Coqにコマンドが受理されているのかされていないのかわからない状態になります。また、単に時間がかかっていてあとから結果が返ってきたり、そもそも結果が返ってこない可能性があります。Coq XMLプロトコルの結果はどのコマンドに対しての結果なのかというのがわからないため、タイムアウトでリトライしてもその結果が古いものなのか新しいものなのかわかりません。そのような怪しい状態になるくらいであればもう切断してしまってやりなおすようにします。
}

+code(
```
 client                 server                 coqtop
   |         Hoge         |                      |
   | -------------------> |        Fuga          |
   |                      | -------------------> |
   |                      |        ...           |
   |       Timeout        |                      |
   | <------------------- |                      |
   |      disconnect      |                      |
   | ---------x---------- |                      |
```
){タイムアウトのフロー}
>

+subsection{コネクションの切断}<
+p{
クライアント・サーバ間での接続が切れたときはサーバ・Coq間での接続も、
サーバ・Coq間での接続が切れたときはクライアント・サーバ間での接続も切断してしまいます。
そして必要であれば接続からやり直します。
}

+code(
```
 client                 server                 coqtop
   |      disconnect      |                      |
   | ---------x---------- |      disconnect      |
   |                      | ---------x---------- |


 client                 server                 coqtop
   |                      |      disconnect      |
   |      disconnect      | ---------x---------- |
   | ---------x---------- |
```
){コネクション切断時のフロー}
>

+subsection{接続の維持と切断の検知}<
+p{
接続の維持及び切断の検知はWebSocketのPing Pongを使うようにします。
}
+p{
送信に異常があれば切断されたとしてそのセッションは終了です。必要に応じてクライアントは再度サーバに接続要求を投げます。
}
>

+subsection{面倒なパターン}<
+p{
WebSocketを使うので、メッセージの順序は保たれるという前提が使えますが、それでも面倒なパターンがいくつかあるので、各パターンについてどのような挙動が好ましいか考えていきます。
}
+listing{
* 連続で送ったが、途中でセンテンスが失敗した
  ** 途中でセンテンスが失敗した場合、それ以降のセンテンス、つまり依存コマンドが失敗しているコマンドは捨てるようにします。捨てるので結果も返しません。クライアントもその想定で作ります。
  ** もちろん失敗したセンテンスのエラーは返します。
* 連続で送ったが、途中でタイムアウトになった
  ** 送ったコマンドが成功しているのか失敗しているのかわからない状態です。
  ** タイムアウトエラーを送信し、接続を切って再接続します。
* 連続で送ったが、サーバ・Coq間で途中のセンテンスの結果だけ返ってこなかった
  ** こちらも同様にタイムアウトエラーを送信して切断・再接続します。
* 連続で送ったが、サーバ・Coq間でCoqに送信したセンテンスと結果の順序が入れ替わった
  ** サーバ・Coq間では、コマンドの送信と結果の受信を必ずペアで行うことで、順序の入れ替わりをなくします。
* 連続で送って、途中でコマンドが失敗したが、失敗したコマンドのあとに失敗してもしなくても受理されるコマンドが含まれていた
  ** 依存コマンドがあるので、依存コマンドが失敗していればそのコマンドは実行しません。なので予期せずセンテンスが飛ぶということはありません。
* アプリが閉じられた
  ** WebSocketの接続が切れたらそれで終わりです。切れなくてもサーバが数分間コマンドが送られなければ切断とすればいいでしょう。
* 数時間後に再開した
  ** 切断されていると思うので再接続して最初から始めます。
}
+p{
現状はこの方針で大丈夫なんじゃないかと思っていますが、もしかすると実際にサーバとクライアントを書いているときに不都合が出て変わるかもしれません。
}
>
>

+section{おわりに}<
+p{
この記事では『出先でも証明がしたい Part 1』と題して、Coqのエディタアプリの仕様と設計を書いていきました。特にCoq XMLプロトコルについては日本語では一番詳しい記事なのではないかと思います。非常にニッチな話題なのでCoq XMLプロトコルを詳しく知りたい人がいる気はしませんが、参考になれば幸いです。
}
+p{
次回はサーバ側の実装について書いていきたいと思いますので、ぜひ楽しみにしていてください。
}
>

  >
>
