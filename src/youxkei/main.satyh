@import: ../../shinchoku-tairiku.satyh/shinchoku-tairiku

let-inline \zuref label = {図\ref(label);}
let-inline \dfn word = {\emph{#word;}}

let-block +youxkei = '<
    +chapter{QRコードみたいな魔法陣を作る}{水35L 炭素20㎏ アンモニア4L 石灰1.5㎏ リン800g 塩分250g 硝石100g 硫黄80g フッ素7.5g 鉄5g ケイ素3g その他少量の15の元素... - エドワード・エルリック}<
        +section{はじめに}<
            +p{
                こんにちは。\@youxkeiです。
                今回は、QRコードっぽい魔法陣を作る話をしていきます。
            }
            +p{
                ファンタジー作品では、よく魔法が登場します。
                魔法が存在する作品の中でも、魔法陣を起点として魔法が発動する描写がされている作品がいくつかあります。
            }
            +p{
                魔法陣から魔法が発動する描写、かっこいいですよね！かっこいいなぁと思いながら作品を見ていて、あるとき、ふとこう思いました。
            }
            +p{
                「ほとんどの場合、魔法陣とそこから発動する魔法は一対一に対応しているんだから、魔法陣の形は何らかの意味をもっているはず」
            }
            +p{
                ファンタジー作品の中の魔法陣と同じように、現実世界の魔法陣にも意味をもたせることができると、とても面白そうです。
                意味を持つ魔法陣は、言い換えるなら情報を持つ魔法陣、ということになりそうです。
            }
            +p{
                ところで、情報を持つ二次元図形と聞くと、思い浮かぶものがありますよね。そうです、バーコードやQRコードです\footnote{厳密に言えば「文字列」も情報を持つ二次元図形ではありますね・・・}。
            }
            +p{
                つまりこの章では、QRコードのように情報を持つことができて、さらにその情報を機械が読み取ることができる魔法陣はどんなものであるかを考え、実際に作っていきます。
            }
            +p{
                QRコードをリスペクトして、この章で作るQRコードっぽい魔法陣の名前は\dfn{MCコード}としました。MCはMagic Circleの頭文字です。
            }
        >

        +section{情報をもつ魔法陣}<
            +p{
                魔法陣というと、\zuref(`youxkei:figure:magic_circle`);のような典型的なものを想像します。
                この典型的な魔法陣を見ていると、情報を埋め込んだり、埋め込んだ情報を機械で読み取るのは難しそうに感じます。
            }
            +p{
                ところで、この典型的な魔法陣を見ていると、数学の授業でなにか似たようなものを見たことがあるような気がします。
                そうです。グラフです。
            }
            +figure?:(`youxkei:figure:magic_circle`)?:(8cm)(`youxkei/magic_circle.pdf`){典型的な魔法陣}
            +p{
                当然、ここでのグラフは\zuref(`youxkei:figure:not_graph`);のグラフではなく、\zuref(`youxkei:figure:graph`);のグラフです。
            }
            +p{
                グラフであれば、情報を埋め込むことができますし、機械で読み取りやすそうです。
                グラフに情報を埋め込み、そのグラフを魔法陣っぽく表示することで、情報を機会が読み取ることができる魔法陣を作ることができそうです。
            }
            +figure?:(`youxkei:figure:not_graph`)?:(10cm)(`youxkei/not_graph.pdf`){こちらの方のグラフではない}
            +figure?:(`youxkei:figure:graph`)?:(8cm)(`youxkei/graph.pdf`){こちらの方のグラフ}
        >

        +section{MCコードの構成}<
            +p{
                MCコードの構造として、無向多重グラフを採用しました。
                多重グラフでは、頂点と頂点の間に複数の辺を張ることができます。
                MCコードでは、MCコードの構造を表す辺として主に2重の辺を、MCコードに埋め込まれたデータを表す辺として主に1重の辺を使うことにします。
            }
            +p{
                MCコードは以下のような再帰的な構造となっています。
            }
            +subsection{基本形}<
                +p{
                    MCコードの基本形は\zuref(`youxkei:figure:mccode_base`);のような形です。
                }
                +figure?:(`youxkei:figure:mccode_base`)?:(3cm)(`youxkei/mccode_base.pdf`){MCコードの基本形}
                +p{
                    ここで、2重の辺で繋がれた閉路を\dfn{フレーム}と呼ぶことにします。
                    基本形にはただ1つのフレームが存在します。
                }
                +p{
                    基本形にはいくつかの頂点があり、フレームに属する頂点とフレームに属さない頂点があります。
                    フレームに属さない頂点のことを、その配置される場所から\dfn{中心頂点}と呼ぶことにします。
                }
                +p{
                    中心頂点から伸びている2重の辺を\dfn{橋辺}と呼び、中心頂点から伸びている1重の辺を\dfn{方向辺}と呼ぶことにします。
                    さらに、橋辺に繋がっているフレーム上の頂点を、フレームの\dfn{起頂点}と呼び、
                    方向辺に繋がっているフレーム上の頂点を、フレームの\dfn{方向頂点}と呼ぶことにします。
                    フレーム上の頂点は、起頂点から方向頂点に向かう方向に番号を振ることができます。
                    起頂点と方向頂点は、MCコードを機械で読み取る際、グラフの隣接リストから頂点の番号を得るために必要になります。
                }
                +p{
                    ここで、MCコードの\dfn{密度}を導入します。基本形の密度は、フレーム上の頂点の数です。
                    \zuref(`youxkei:figure:mccode_base`);の例では、密度は9となっています。
                    フレーム上には起頂点と方向頂点が必要なので、密度は2以上である必要があります。
                }
                +p{
                    更に\dfn{最外フレーム}も導入します。
                    基本形の最外フレームは、基本形にただ1つ存在するフレームです。
                }
                +p{
                    密度によらず、中心頂点の次数は3になることが分かります。
                }
            >
            +subsection{フレーム追加}<
                +p{
                    いま、\zuref(`youxkei:figure:mccode_m`);のようにMCコード${M}があるとします。
                    このMCコード${M}の外側にフレームを追加したMCコード${M'}は、\zuref(`youxkei:figure:mccode_m_prime`);のようになります。
                }
                +figure?:(`youxkei:figure:mccode_m`)?:(8cm)(`youxkei/mccode_m.pdf`){${M}}
                +p{
                    追加するフレームの頂点数は、${M}の頂点数に密度を足した数になります。
                    ${M}の最外フレームの頂点数は27、${M}の密度は9なので\footnote{図からは${M}の密度が9であることは分かりませんが、ここでは9であるとします}、追加したフレームの頂点数は36となっています。
                }
                +p{
                    ${M}の最外フレームから追加したフレームにいつくかの辺が張られています。
                    それらの辺のうち1つだけ2重の辺があり、この辺のことも基本形と同じく橋辺と呼ぶことにします。
                    さらに、橋辺に繋がっている${M}の最外フレーム上の頂点から伸びている1重の辺のことも基本形と同じく方向辺と呼ぶことにします。
                }
                +p{
                    橋辺に繋がっている追加したフレーム上の頂点が追加したフレームの起頂点になり、
                    方向辺に繋がっている追加したフレーム上の頂点が追加したフレームの方向頂点になります。
                    追加したフレームの起頂点と方向頂点を明確にするため、必ず橋辺と方向辺が存在する必要があります。
                }
                +figure?:(`youxkei:figure:mccode_m_prime`)?:(8cm)(`youxkei/mccode_m_prime.pdf`){${M'}}
                +p{
                    ${M}の最外フレームから追加したフレーム張られている辺のうち、橋辺と方向辺でない辺は情報埋め込みのため辺であるため、ここでは\dfn{データ辺}と呼ぶことにします。
                    情報の埋め込み方法は単純で、データ辺が張られていれば1、データ辺が張られていれば0を表します。
                }
                +p{
                    ${M'}の密度は${M}の密度に、${M'}の最外フレームは追加したフレームとなります。
                }
            >
        >

        +section{MCコードの性質}<
            +p{
                MCコードを機械で読み取る上で重要となるMCコードの性質があります。それは、「全てのMCコードには次数が3となる中心頂点がただ1つ存在する」という点です。
                この性質は簡単に証明できるため、ここに証明を載せようと考えたのですが、
                この本で使用しているshinchoku-tairiku.satyh\footnote{\url(`https://github.com/shinchoku-tairiku/shinchoku-tairiku.satyh`);}に
                \code(`+theorem`);や\code(`+proof`);がなかったので、載せるモチベーションが下がってしまいました。
                仕方がないので、この性質の証明は読者の方への演習問題にしたいと思います。
            }
            +p{
                中心頂点から橋辺と方向辺をたどって全てのフレーム上の頂点に番号を振り、
                頂点間に張られていたりいなかったりするデータ辺を見ることで、
                MCコードに埋め込まれた情報を機械で読み取ることができます。
            }
        >
    >
>
